// Generated by CoffeeScript 1.12.7

/*

  Sample custom data type for Workshop, this is a super simple example
  where the user can enter two numbers on editor mode
  and the sum of them is displayed in detail mode.
 */
var WorkshopCustomDataType,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

WorkshopCustomDataType = (function(superClass) {
  extend(WorkshopCustomDataType, superClass);

  function WorkshopCustomDataType() {
    return WorkshopCustomDataType.__super__.constructor.apply(this, arguments);
  }

  WorkshopCustomDataType.prototype.getCustomDataTypeName = function() {
    return "custom:workshop.custom.data.type";
  };

  WorkshopCustomDataType.prototype.getCustomDataOptionsInDatamodelInfo = function(custom_settings) {
    return [];
  };

  WorkshopCustomDataType.prototype.initData = function(data) {
    if (!data[this.name()]) {
      return data[this.name()] = {};
    }
  };

  WorkshopCustomDataType.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var cdata, value;
    cdata = data[this.name()];
    value = cdata.field_one + cdata.field_two;
    return new CUI.Label({
      text: value
    });
  };

  WorkshopCustomDataType.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var cdata, form;
    this.initData(data);
    cdata = data[this.name()];
    form = new CUI.Form({
      data: cdata,
      fields: [
        {
          form: {
            label: "Numeric value 1"
          },
          type: CUI.NumberInput,
          name: "field_one"
        }, {
          form: {
            label: "Numeric value 2"
          },
          type: CUI.NumberInput,
          name: "field_two"
        }
      ],
      onDataChanged: (function(_this) {
        return function() {
          return CUI.Events.trigger({
            node: form,
            type: "editor-changed"
          });
        };
      })(this)
    });
    return form.start();
  };

  WorkshopCustomDataType.prototype.getSaveData = function(data, save_data, opts) {
    var cdata;
    cdata = data[this.name()];
    save_data[this.name()] = CUI.util.copyObject(cdata, true);
  };

  return WorkshopCustomDataType;

})(CustomDataType);

CustomDataType.register(WorkshopCustomDataType);
